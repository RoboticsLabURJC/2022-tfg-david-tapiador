{"editor":{"id":"d6210a0f-a225-4555-8f64-e7db042b2dd4","locked":true,"offsetX":-1,"offsetY":-1,"zoom":100,"gridSize":0,"layers":[{"id":"3effa9a6-1264-4118-ac6f-021d90c8bf3e","type":"diagram-links","isSvg":true,"transformed":true,"models":{"369c5031-3e8f-4e35-b3b6-5255a914410a":{"id":"369c5031-3e8f-4e35-b3b6-5255a914410a","type":"default","selected":false,"source":"f9b837b1-d35e-46b0-9be0-c0d02e6e211a","sourcePort":"9ad56863-9af8-496f-9ba6-49c985189411","target":"b4a21ba5-40ae-4763-a8fd-0d874a46dec8","targetPort":"e7cad8b4-5cc5-43dd-8f3b-6894d4c7f122","points":[{"id":"05637819-2045-48ec-94d9-38d9d287b5f0","type":"point","x":420.5,"y":518.5},{"id":"df474372-9d9f-44b8-9364-2de0648586d3","type":"point","x":502.5,"y":451}],"labels":[],"width":3,"color":"gray","curvyness":50,"selectedColor":"rgb(0,192,255)"},"a2045e9c-15c3-4e20-9c86-ccabcc954b6f":{"id":"a2045e9c-15c3-4e20-9c86-ccabcc954b6f","type":"default","selected":false,"source":"b4a21ba5-40ae-4763-a8fd-0d874a46dec8","sourcePort":"f7202421-f213-4b92-9dd3-574017e6b356","target":"94c80789-2e33-4757-b1a5-0d0df3a6ae27","targetPort":"f53d8d7f-e2f0-43ce-949c-6a8f4ecec12a","points":[{"id":"32083416-142a-4df2-9c82-68965d022e13","type":"point","x":1283.15625,"y":451},{"id":"7a4a8b72-abcb-4561-b7f8-2e9617fd7665","type":"point","x":1452.5,"y":518.5}],"labels":[],"width":3,"color":"gray","curvyness":50,"selectedColor":"rgb(0,192,255)"},"f5d8022f-daf3-4187-b9f4-9682d154029e":{"id":"f5d8022f-daf3-4187-b9f4-9682d154029e","type":"default","selected":false,"source":"b4a21ba5-40ae-4763-a8fd-0d874a46dec8","sourcePort":"d2751b14-db81-4455-a253-32cf85236e5d","target":"0004-897e434f-4ccc-4c3d-9466-bf8a3111b7a9","targetPort":"378f5a08-f973-444f-b1e5-87b1409c293b","points":[{"id":"03d23af9-e63e-4a7c-ba82-b9321ad58c9b","type":"point","x":752.640625,"y":272.5},{"id":"31c80851-1837-4bab-8253-a896191eaf94","type":"point","x":717,"y":176.5}],"labels":[],"width":3,"color":"gray","curvyness":50,"selectedColor":"rgb(0,192,255)"},"a64657df-0a40-45ee-8bf1-5c16d76c7873":{"id":"a64657df-0a40-45ee-8bf1-5c16d76c7873","type":"default","selected":false,"source":"0008-3c24ef3a-5e27-491d-9535-740b05bf5e65","sourcePort":"dbf975b2-5e12-4d68-b20b-68a591608f20","target":"b4a21ba5-40ae-4763-a8fd-0d874a46dec8","targetPort":"b86a3aa1-8c09-4fb2-baef-6b31c6738fd6","points":[{"id":"26f88c95-1a0c-44bb-b2fc-0cc68f96ae58","type":"point","x":920,"y":186.5},{"id":"366413f8-84be-47cf-9909-57454f731354","type":"point","x":1033.125,"y":272.5}],"labels":[],"width":3,"color":"gray","curvyness":50,"selectedColor":"rgb(0,192,255)"}}},{"id":"5390ba84-5213-4882-9a31-594a3e8d08cf","type":"diagram-nodes","isSvg":false,"transformed":true,"models":{"0004-897e434f-4ccc-4c3d-9466-bf8a3111b7a9":{"id":"0004-897e434f-4ccc-4c3d-9466-bf8a3111b7a9","type":"basic.constant","selected":false,"x":656,"y":61,"ports":[{"id":"378f5a08-f973-444f-b1e5-87b1409c293b","type":"port.output","x":709.5,"y":169,"name":"constant-out","alignment":"bottom","parentNode":"0004-897e434f-4ccc-4c3d-9466-bf8a3111b7a9","links":["f5d8022f-daf3-4187-b9f4-9682d154029e"],"in":false,"label":"constant-out","hideLabel":true}],"data":{"name":"Frequency","value":"30.0","local":true}},"94c80789-2e33-4757-b1a5-0d0df3a6ae27":{"id":"94c80789-2e33-4757-b1a5-0d0df3a6ae27","type":"basic.output","selected":false,"x":1444,"y":492,"ports":[{"id":"f53d8d7f-e2f0-43ce-949c-6a8f4ecec12a","type":"port.input","x":1445,"y":511,"name":"output-in","alignment":"left","parentNode":"94c80789-2e33-4757-b1a5-0d0df3a6ae27","links":["a2045e9c-15c3-4e20-9c86-ccabcc954b6f"],"in":true,"label":"output-in","hideLabel":true}],"data":{"name":"Out"}},"f9b837b1-d35e-46b0-9be0-c0d02e6e211a":{"id":"f9b837b1-d35e-46b0-9be0-c0d02e6e211a","type":"basic.input","selected":false,"x":327,"y":492,"ports":[{"id":"9ad56863-9af8-496f-9ba6-49c985189411","type":"port.output","x":413,"y":511,"name":"input-out","alignment":"right","parentNode":"f9b837b1-d35e-46b0-9be0-c0d02e6e211a","links":["369c5031-3e8f-4e35-b3b6-5255a914410a"],"in":false,"label":"input-out","hideLabel":true}],"data":{"name":"E"}},"b4a21ba5-40ae-4763-a8fd-0d874a46dec8":{"id":"b4a21ba5-40ae-4763-a8fd-0d874a46dec8","type":"basic.code","selected":false,"x":494,"y":264,"ports":[{"id":"e7cad8b4-5cc5-43dd-8f3b-6894d4c7f122","type":"port.input","x":495,"y":443.5,"name":"E","alignment":"left","parentNode":"b4a21ba5-40ae-4763-a8fd-0d874a46dec8","links":["369c5031-3e8f-4e35-b3b6-5255a914410a"],"in":true,"label":"E","hideLabel":false},{"id":"f7202421-f213-4b92-9dd3-574017e6b356","type":"port.output","x":1275.65625,"y":443.5,"name":"Out","alignment":"right","parentNode":"b4a21ba5-40ae-4763-a8fd-0d874a46dec8","links":["a2045e9c-15c3-4e20-9c86-ccabcc954b6f"],"in":false,"label":"Out","hideLabel":false},{"id":"d2751b14-db81-4455-a253-32cf85236e5d","type":"port.parameter","x":745.140625,"y":265,"name":"Frequency","alignment":"top","parentNode":"b4a21ba5-40ae-4763-a8fd-0d874a46dec8","links":["f5d8022f-daf3-4187-b9f4-9682d154029e"],"in":true,"label":"Frequency","hideLabel":false},{"id":"b86a3aa1-8c09-4fb2-baef-6b31c6738fd6","type":"port.parameter","x":1025.625,"y":265,"name":"ROS Topic","alignment":"top","parentNode":"b4a21ba5-40ae-4763-a8fd-0d874a46dec8","links":["a64657df-0a40-45ee-8bf1-5c16d76c7873"],"in":true,"label":"ROS Topic","hideLabel":false}],"data":{"code":"#!/usr/bin/env python3\n\nimport numpy as np\nfrom time import sleep\nfrom utils.wires.wire_img import share_image\nfrom utils.wires.wire_str import read_string\nfrom utils.tools.freq_monitor import monitor_frequency\n\nimport rclpy\nfrom rclpy.node import Node\nfrom cv_bridge import CvBridge\nfrom sensor_msgs.msg import Image\n\nbridge = CvBridge()\nimg = None\n\n# ros2 node class\nclass CamSubscriber(Node):\n\n    def __init__(self, topic):\n\n        super().__init__('cam_subscriber')\n\n        self.subscription = self.create_subscription(\n            Image, topic, self.callback, 10)\n\n        self.subscription  # prevent unused variable warning\n\n\n    def callback(self, msg):\n\n        global img\n        img = np.asarray(bridge.imgmsg_to_cv2(msg, \"bgr8\"), dtype=np.uint8)\n\n\n\ndef loop(block_name, input_wires, output_wires, parameters, flags):\n    \n    global img\n\n    output_0 = share_image(output_wires[0])\n\n    enabled = False\n    try:\n        enable_wire = read_string(input_wires[0])\n    except IndexError:\n        enabled = np.True_\n\n    required_frequency, update = float(parameters[0]), 1\n    control_data = np.array([0.0,0.03])\n\n    if flags[0] == 1:\n        monitor_frequency(block_name, control_data, required_frequency, update)\n\n    rclpy.init()\n    camera_subscriber = CamSubscriber(str(parameters[1]))\n\n    try:\n\n        while True:\n\n            img =  None\n            rclpy.spin_once(camera_subscriber)\n\n            if enabled or (update := bool(enable_wire.get()[0])):\n\n                if img is not None:\n                    output_0.add(img)\n                    control_data[0] += 1\n                \n            sleep(control_data[1])       \n    \n    except KeyboardInterrupt:\n\n        camera_subscriber.destroy_node()\n        rclpy.shutdown()\n\n        enable_wire.release()\n        output_0.release()\n","params":[{"name":"Frequency"},{"name":"ROS Topic"}],"ports":{"in":[{"name":"E"}],"out":[{"name":"Out"}]},"size":{"width":"755px","height":"321px"}}},"0008-3c24ef3a-5e27-491d-9535-740b05bf5e65":{"id":"0008-3c24ef3a-5e27-491d-9535-740b05bf5e65","type":"basic.constant","selected":true,"x":858,"y":70,"ports":[{"id":"dbf975b2-5e12-4d68-b20b-68a591608f20","type":"port.output","x":912.5,"y":179,"name":"constant-out","alignment":"bottom","parentNode":"0008-3c24ef3a-5e27-491d-9535-740b05bf5e65","links":["a64657df-0a40-45ee-8bf1-5c16d76c7873"],"in":false,"label":"constant-out","hideLabel":true}],"data":{"name":"ROS Topic","value":"/depth_camera/image_raw","local":true}}}}]},"version":"3.0","package":{"name":"","version":"","description":"","author":"","image":""},"design":{"board":"Python3-Noetic","graph":{"blocks":[{"id":"0004-897e434f-4ccc-4c3d-9466-bf8a3111b7a9","type":"basic.constant","data":{"name":"Frequency","value":"30.0","local":true},"position":{"x":656,"y":61}},{"id":"94c80789-2e33-4757-b1a5-0d0df3a6ae27","type":"basic.output","data":{"name":"Out"},"position":{"x":1444,"y":492}},{"id":"f9b837b1-d35e-46b0-9be0-c0d02e6e211a","type":"basic.input","data":{"name":"E"},"position":{"x":327,"y":492}},{"id":"b4a21ba5-40ae-4763-a8fd-0d874a46dec8","type":"basic.code","data":{"code":"#!/usr/bin/env python3\n\nimport numpy as np\nfrom time import sleep\nfrom utils.wires.wire_img import share_image\nfrom utils.wires.wire_str import read_string\nfrom utils.tools.freq_monitor import monitor_frequency\n\nimport rclpy\nfrom rclpy.node import Node\nfrom cv_bridge import CvBridge\nfrom sensor_msgs.msg import Image\n\nbridge = CvBridge()\nimg = None\n\n# ros2 node class\nclass CamSubscriber(Node):\n\n    def __init__(self, topic):\n\n        super().__init__('cam_subscriber')\n\n        self.subscription = self.create_subscription(\n            Image, topic, self.callback, 10)\n\n        self.subscription  # prevent unused variable warning\n\n\n    def callback(self, msg):\n\n        global img\n        img = np.asarray(bridge.imgmsg_to_cv2(msg, \"bgr8\"), dtype=np.uint8)\n\n\n\ndef loop(block_name, input_wires, output_wires, parameters, flags):\n    \n    global img\n\n    output_0 = share_image(output_wires[0])\n\n    enabled = False\n    try:\n        enable_wire = read_string(input_wires[0])\n    except IndexError:\n        enabled = np.True_\n\n    required_frequency, update = float(parameters[0]), 1\n    control_data = np.array([0.0,0.03])\n\n    if flags[0] == 1:\n        monitor_frequency(block_name, control_data, required_frequency, update)\n\n    rclpy.init()\n    camera_subscriber = CamSubscriber(str(parameters[1]))\n\n    try:\n\n        while True:\n\n            img =  None\n            rclpy.spin_once(camera_subscriber)\n\n            if enabled or (update := bool(enable_wire.get()[0])):\n\n                if img is not None:\n                    output_0.add(img)\n                    control_data[0] += 1\n                \n            sleep(control_data[1])       \n    \n    except KeyboardInterrupt:\n\n        camera_subscriber.destroy_node()\n        rclpy.shutdown()\n\n        enable_wire.release()\n        output_0.release()\n","params":[{"name":"Frequency"},{"name":"ROS Topic"}],"ports":{"in":[{"name":"E"}],"out":[{"name":"Out"}]},"size":{"width":"755px","height":"321px"}},"position":{"x":494,"y":264}},{"id":"0008-3c24ef3a-5e27-491d-9535-740b05bf5e65","type":"basic.constant","data":{"name":"ROS Topic","value":"/depth_camera/image_raw","local":true},"position":{"x":858,"y":70}}],"wires":[{"source":{"block":"f9b837b1-d35e-46b0-9be0-c0d02e6e211a","port":"input-out"},"target":{"block":"b4a21ba5-40ae-4763-a8fd-0d874a46dec8","port":"E"}},{"source":{"block":"b4a21ba5-40ae-4763-a8fd-0d874a46dec8","port":"Out"},"target":{"block":"94c80789-2e33-4757-b1a5-0d0df3a6ae27","port":"output-in"}},{"source":{"block":"0004-897e434f-4ccc-4c3d-9466-bf8a3111b7a9","port":"constant-out"},"target":{"block":"b4a21ba5-40ae-4763-a8fd-0d874a46dec8","port":"Frequency"}},{"source":{"block":"0008-3c24ef3a-5e27-491d-9535-740b05bf5e65","port":"constant-out"},"target":{"block":"b4a21ba5-40ae-4763-a8fd-0d874a46dec8","port":"ROS Topic"}}]}},"dependencies":{}}