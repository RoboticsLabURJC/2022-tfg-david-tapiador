{"editor":{"id":"4c4ec56c-a1c0-4095-b733-7b934c036135","offsetX":1,"offsetY":2,"zoom":100,"gridSize":0,"layers":[{"id":"00f704a4-27b2-40b9-bf26-0acc11392664","type":"diagram-links","isSvg":true,"transformed":true,"models":{"28108e89-a6e3-473d-b582-01fcc5a1e4f8":{"id":"28108e89-a6e3-473d-b582-01fcc5a1e4f8","type":"default","selected":false,"source":"0005-376d6e7a-49f8-4efc-b3c9-e0b46071d7de","sourcePort":"8fd1f4ad-f943-435d-8ac5-1c649313fe41","target":"45d42e3c-94f2-430b-8a84-11d7bca646c0","targetPort":"cfba1549-4dec-4ec9-b4c1-af30b90582e0","points":[{"id":"18019c39-0c31-4ec8-a4ba-faa666ade0e5","type":"point","x":851,"y":153.5},{"id":"d96a23c4-d4d9-4d08-84de-92d13ce3d812","type":"point","x":862.328125,"y":221.5}],"labels":[],"width":3,"color":"gray","curvyness":50,"selectedColor":"rgb(0,192,255)"},"35b18cf5-9625-4120-b630-69140b9c5930":{"id":"35b18cf5-9625-4120-b630-69140b9c5930","type":"default","selected":false,"source":"b6bc26dd-b5bd-46ff-a018-1d322cd44e67","sourcePort":"387f3290-3495-40b5-91dc-a6818b4c7782","target":"45d42e3c-94f2-430b-8a84-11d7bca646c0","targetPort":"b9e85fe1-86eb-49b3-bf07-20c01e5902f6","points":[{"id":"e021196f-70ff-46ef-8cbe-96b64daf7846","type":"point","x":255.5,"y":242.5},{"id":"7b256d21-25e2-49ee-952d-5fb3d183df07","type":"point","x":426.5,"y":445.15625}],"labels":[],"width":3,"color":"gray","curvyness":50,"selectedColor":"rgb(0,192,255)"},"a776eead-03de-49e5-a433-85642bfbe4eb":{"id":"a776eead-03de-49e5-a433-85642bfbe4eb","type":"default","selected":false,"source":"4e64e245-e916-4fe9-b371-b77f05b9633d","sourcePort":"965e7a52-6436-4665-b2f3-82f6e4afe4a1","target":"45d42e3c-94f2-430b-8a84-11d7bca646c0","targetPort":"ab93e579-5b0a-42e6-be87-5d776f583881","points":[{"id":"28029224-8b3d-4d1b-9ab4-064be9c4794a","type":"point","x":285.5,"y":572.5},{"id":"db42a834-d44c-4ce2-acb2-b9653d3cef06","type":"point","x":426.5,"y":668.8125}],"labels":[],"width":3,"color":"gray","curvyness":50,"selectedColor":"rgb(0,192,255)"},"683af767-e010-4c27-8d34-765ddfd7ba94":{"id":"683af767-e010-4c27-8d34-765ddfd7ba94","type":"default","selected":false,"source":"7804f53f-6c60-47ca-88d8-6e93ee0993ea","sourcePort":"a75be3bc-35f0-4543-a6f1-736e8b8b9ab4","target":"45d42e3c-94f2-430b-8a84-11d7bca646c0","targetPort":"78d948a2-16c3-4cee-8175-a850242a38e6","points":[{"id":"bb98fba9-e3bd-4087-8fdd-974eaf86c0e1","type":"point","x":1550.5,"y":444.5},{"id":"8ca11786-b9db-40de-bf8c-a953998bcae1","type":"point","x":1298.15625,"y":557}],"labels":[],"width":3,"color":"gray","curvyness":50,"selectedColor":"rgb(0,192,255)"}}},{"id":"fd8a31e5-b68c-4354-b9ad-04adb8e4b649","type":"diagram-nodes","isSvg":false,"transformed":true,"models":{"45d42e3c-94f2-430b-8a84-11d7bca646c0":{"id":"45d42e3c-94f2-430b-8a84-11d7bca646c0","type":"basic.code","selected":false,"x":418,"y":213,"ports":[{"id":"b9e85fe1-86eb-49b3-bf07-20c01e5902f6","type":"port.input","x":419,"y":437.65625,"name":"Inp","alignment":"left","parentNode":"45d42e3c-94f2-430b-8a84-11d7bca646c0","links":["35b18cf5-9625-4120-b630-69140b9c5930"],"in":true,"label":"Inp","hideLabel":false},{"id":"ab93e579-5b0a-42e6-be87-5d776f583881","type":"port.input","x":419,"y":661.3125,"name":"E","alignment":"left","parentNode":"45d42e3c-94f2-430b-8a84-11d7bca646c0","links":["a776eead-03de-49e5-a433-85642bfbe4eb"],"in":true,"label":"E","hideLabel":false},{"id":"78d948a2-16c3-4cee-8175-a850242a38e6","type":"port.output","x":1290.65625,"y":549.5,"name":"Out","alignment":"right","parentNode":"45d42e3c-94f2-430b-8a84-11d7bca646c0","links":["683af767-e010-4c27-8d34-765ddfd7ba94"],"in":false,"label":"Out","hideLabel":false},{"id":"cfba1549-4dec-4ec9-b4c1-af30b90582e0","type":"port.parameter","x":854.828125,"y":214,"name":"Frequency","alignment":"top","parentNode":"45d42e3c-94f2-430b-8a84-11d7bca646c0","links":["28108e89-a6e3-473d-b582-01fcc5a1e4f8"],"in":true,"label":"Frequency","hideLabel":false}],"data":{"code":"import cv2 as cv\nimport numpy as np\nimport math\nfrom time import sleep\nfrom utils.wires.wire_img import read_image\nfrom utils.wires.wire_str import share_string\nfrom utils.tools.freq_monitor import monitor_frequency\n\ndef loop(block_name, input_wires, output_wires, parameters, flags):\n\n    input_0 = read_image(input_wires[0])\n    output_0 = share_string(output_wires[0])\n\n    enabled = False\n    try:\n        enable_wire = read_string(input_wires[1])\n    except IndexError:\n        enabled = True\n\n    required_frequency, update = float(parameters[0]), 1\n    control_data = np.array([0.0,0.03])\n\n    if flags[0] == 1:\n        monitor_frequency(block_name, control_data, required_frequency, update)\n\n    try:\n        center = 0\n        cx = 0\n        cy = 0\n        while True:\n        \n            if enabled or (update := bool(enable_wire.get()[0])):\n\n                img = input_0.get()\n                center = (img.shape)[1]/2\n                \n                if msg is not None and msg[0] is not None:\n\n                    mascara = cv2.morphologyEx(mascara,cv2.MORPH_OPEN,kernel)\n                    mascara = cv2.morphologyEx(mascara,cv2.MORPH_CLOSE,kernel)\n\n\n                    contours, hierarchy = cv2.findContours(mascara, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\n                    if len(contours)>0:\n                        mayor_contorno=max(contours, key=cv2.contourArea)\n\n                        momentos = cv2.moments(mayor_contorno)\n                        cx = float(momentos['m10']/momentos['m00'])\n\n\n                    to_write = String(center - cx)\n                    output_0.add(to_write)\n                    control_data[0] += 1\n                    \n            sleep(control_data[1])\n\n    except KeyboardInterrupt:\n    \n        input_0.release()\n        output_0.release()\n        enable_wire.release()","params":[{"name":"Frequency"}],"ports":{"in":[{"name":"Inp"},{"name":"E"}],"out":[{"name":"Out"}]},"size":{"width":"0px","height":"0px"}}},"b6bc26dd-b5bd-46ff-a018-1d322cd44e67":{"id":"b6bc26dd-b5bd-46ff-a018-1d322cd44e67","type":"basic.input","selected":false,"x":162,"y":216,"ports":[{"id":"387f3290-3495-40b5-91dc-a6818b4c7782","type":"port.output","x":248,"y":235,"name":"input-out","alignment":"right","parentNode":"b6bc26dd-b5bd-46ff-a018-1d322cd44e67","links":["35b18cf5-9625-4120-b630-69140b9c5930"],"in":false,"label":"input-out","hideLabel":true}],"data":{"name":"Inp"}},"4e64e245-e916-4fe9-b371-b77f05b9633d":{"id":"4e64e245-e916-4fe9-b371-b77f05b9633d","type":"basic.input","selected":false,"x":192,"y":546,"ports":[{"id":"965e7a52-6436-4665-b2f3-82f6e4afe4a1","type":"port.output","x":278,"y":565,"name":"input-out","alignment":"right","parentNode":"4e64e245-e916-4fe9-b371-b77f05b9633d","links":["a776eead-03de-49e5-a433-85642bfbe4eb"],"in":false,"label":"input-out","hideLabel":true}],"data":{"name":"E"}},"7804f53f-6c60-47ca-88d8-6e93ee0993ea":{"id":"7804f53f-6c60-47ca-88d8-6e93ee0993ea","type":"basic.output","selected":false,"x":1542,"y":418,"ports":[{"id":"a75be3bc-35f0-4543-a6f1-736e8b8b9ab4","type":"port.input","x":1543,"y":437,"name":"output-in","alignment":"left","parentNode":"7804f53f-6c60-47ca-88d8-6e93ee0993ea","links":["683af767-e010-4c27-8d34-765ddfd7ba94"],"in":true,"label":"output-in","hideLabel":true}],"data":{"name":"Out"}},"0005-376d6e7a-49f8-4efc-b3c9-e0b46071d7de":{"id":"0005-376d6e7a-49f8-4efc-b3c9-e0b46071d7de","type":"basic.constant","selected":true,"x":789,"y":37,"ports":[{"id":"8fd1f4ad-f943-435d-8ac5-1c649313fe41","type":"port.output","x":843.5,"y":146,"name":"constant-out","alignment":"bottom","parentNode":"0005-376d6e7a-49f8-4efc-b3c9-e0b46071d7de","links":["28108e89-a6e3-473d-b582-01fcc5a1e4f8"],"in":false,"label":"constant-out","hideLabel":true}],"data":{"name":"Frequency","value":"30.0","local":true}}}}]},"version":"3.0","package":{"name":"","version":"","description":"","author":"","image":""},"design":{"board":"Python3-Noetic","graph":{"blocks":[{"id":"45d42e3c-94f2-430b-8a84-11d7bca646c0","type":"basic.code","data":{"code":"import cv2 as cv\nimport numpy as np\nimport math\nfrom time import sleep\nfrom utils.wires.wire_img import read_image\nfrom utils.wires.wire_str import share_string\nfrom utils.tools.freq_monitor import monitor_frequency\n\ndef loop(block_name, input_wires, output_wires, parameters, flags):\n\n    input_0 = read_image(input_wires[0])\n    output_0 = share_string(output_wires[0])\n\n    enabled = False\n    try:\n        enable_wire = read_string(input_wires[1])\n    except IndexError:\n        enabled = True\n\n    required_frequency, update = float(parameters[0]), 1\n    control_data = np.array([0.0,0.03])\n\n    if flags[0] == 1:\n        monitor_frequency(block_name, control_data, required_frequency, update)\n\n    try:\n        center = 0\n        cx = 0\n        cy = 0\n        while True:\n        \n            if enabled or (update := bool(enable_wire.get()[0])):\n\n                img = input_0.get()\n                center = (img.shape)[1]/2\n                \n                if msg is not None and msg[0] is not None:\n\n                    mascara = cv2.morphologyEx(mascara,cv2.MORPH_OPEN,kernel)\n                    mascara = cv2.morphologyEx(mascara,cv2.MORPH_CLOSE,kernel)\n\n\n                    contours, hierarchy = cv2.findContours(mascara, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\n                    if len(contours)>0:\n                        mayor_contorno=max(contours, key=cv2.contourArea)\n\n                        momentos = cv2.moments(mayor_contorno)\n                        cx = float(momentos['m10']/momentos['m00'])\n\n\n                    to_write = String(center - cx)\n                    output_0.add(to_write)\n                    control_data[0] += 1\n                    \n            sleep(control_data[1])\n\n    except KeyboardInterrupt:\n    \n        input_0.release()\n        output_0.release()\n        enable_wire.release()","params":[{"name":"Frequency"}],"ports":{"in":[{"name":"Inp"},{"name":"E"}],"out":[{"name":"Out"}]},"size":{"width":"0px","height":"0px"}},"position":{"x":418,"y":213}},{"id":"b6bc26dd-b5bd-46ff-a018-1d322cd44e67","type":"basic.input","data":{"name":"Inp"},"position":{"x":162,"y":216}},{"id":"4e64e245-e916-4fe9-b371-b77f05b9633d","type":"basic.input","data":{"name":"E"},"position":{"x":192,"y":546}},{"id":"7804f53f-6c60-47ca-88d8-6e93ee0993ea","type":"basic.output","data":{"name":"Out"},"position":{"x":1542,"y":418}},{"id":"0005-376d6e7a-49f8-4efc-b3c9-e0b46071d7de","type":"basic.constant","data":{"name":"Frequency","value":"30.0","local":true},"position":{"x":789,"y":37}}],"wires":[{"source":{"block":"0005-376d6e7a-49f8-4efc-b3c9-e0b46071d7de","port":"constant-out"},"target":{"block":"45d42e3c-94f2-430b-8a84-11d7bca646c0","port":"Frequency"}},{"source":{"block":"b6bc26dd-b5bd-46ff-a018-1d322cd44e67","port":"input-out"},"target":{"block":"45d42e3c-94f2-430b-8a84-11d7bca646c0","port":"Inp"}},{"source":{"block":"4e64e245-e916-4fe9-b371-b77f05b9633d","port":"input-out"},"target":{"block":"45d42e3c-94f2-430b-8a84-11d7bca646c0","port":"E"}},{"source":{"block":"45d42e3c-94f2-430b-8a84-11d7bca646c0","port":"Out"},"target":{"block":"7804f53f-6c60-47ca-88d8-6e93ee0993ea","port":"output-in"}}]}},"dependencies":{}}